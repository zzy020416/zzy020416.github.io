<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>听闻のBlog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-09T02:24:58.887Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ZhouXY</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/03/09/hello-world/"/>
    <id>http://example.com/2022/03/09/hello-world/</id>
    <published>2022-03-09T02:24:58.887Z</published>
    <updated>2022-03-09T02:24:58.887Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java i/o流</title>
    <link href="http://example.com/2022/03/08/io%E6%B5%81/"/>
    <id>http://example.com/2022/03/08/io%E6%B5%81/</id>
    <published>2022-03-08T15:35:34.000Z</published>
    <updated>2022-03-09T07:31:31.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、使用文件类-：-File类"><a href="#1、使用文件类-：-File类" class="headerlink" title="1、使用文件类 ： File类"></a>1、使用文件类 ： File类</h1><h2 id="如何获取文件信息"><a href="#如何获取文件信息" class="headerlink" title="如何获取文件信息"></a>如何获取文件信息</h2><table><thead><tr><th align="center">方法</th><th align="center">说明</th><th align="center">返回值类型</th></tr></thead><tbody><tr><td align="center">getName()</td><td align="center">获取文件名称</td><td align="center">String</td></tr><tr><td align="center">getParent()</td><td align="center">获取文件的父路径字符串</td><td align="center">String</td></tr><tr><td align="center">getPath()</td><td align="center">获取文件的相对路径字符串</td><td align="center">String</td></tr><tr><td align="center">getAbsolutePath()</td><td align="center">获取文件的绝对路径字符串</td><td align="center">String</td></tr><tr><td align="center">exists()</td><td align="center">判断文件或者文件夹是否存在</td><td align="center">boolean</td></tr><tr><td align="center">isFile()</td><td align="center">判断是不是文件类型</td><td align="center">boolean</td></tr><tr><td align="center">isDirectory()</td><td align="center">判断是不是文件夹类型</td><td align="center">boolean</td></tr><tr><td align="center">delete()</td><td align="center">删除文件或文件夹，如果删除成功返回结果为true否则false,删除时文件夹内必须为空</td><td align="center">boolean</td></tr><tr><td align="center">mkdir()</td><td align="center">创建文件夹，创建成功返回true</td><td align="center">boolean</td></tr><tr><td align="center">setReadOnly()</td><td align="center">设置文件或文件夹的只读属性</td><td align="center">boolean</td></tr><tr><td align="center">length()</td><td align="center">获取文件的长度</td><td align="center">long</td></tr><tr><td align="center">lastModified()</td><td align="center">获取文件的最后修改时间</td><td align="center">long</td></tr><tr><td align="center">list()</td><td align="center">获取文件夹中的文件和子文件夹的名称，并存放到字符串数组中</td><td align="center">String[]</td></tr></tbody></table><h3 id="动手试一试"><a href="#动手试一试" class="headerlink" title="动手试一试"></a>动手试一试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rlone.javaio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rlone</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileInfo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//创建File对象并且获取文件</span></span><br><span class="line"><span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;src/com/rlone/io/FileInfo.java&quot;</span>;</span><br><span class="line"><span class="comment">// 根据指定路径创建文件对象</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">System.out.println(<span class="string">&quot;文件名称:&quot;</span> + file.getName());</span><br><span class="line">System.out.println(<span class="string">&quot;文件是否存在：&quot;</span> + file.exists());</span><br><span class="line">System.out.println(<span class="string">&quot;文件的相对路径：&quot;</span> + file.getPath());</span><br><span class="line">System.out.println(<span class="string">&quot;文件的绝对路径：&quot;</span> + file.getAbsolutePath());</span><br><span class="line">System.out.println(<span class="string">&quot;是否为可执行文件：&quot;</span> + file.canExecute());</span><br><span class="line">System.out.println(<span class="string">&quot;文件可以读取：&quot;</span> + file.canRead());</span><br><span class="line">System.out.println(<span class="string">&quot;文件可以写入：&quot;</span> + file.canWrite());</span><br><span class="line">System.out.println(<span class="string">&quot;文件上级路径：&quot;</span> + file.getParent());</span><br><span class="line">System.out.println(<span class="string">&quot;文件大小：&quot;</span> + file.length() + <span class="string">&quot;B&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;文件最后修改时间：&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>(file.lastModified()));</span><br><span class="line">System.out.println(<span class="string">&quot;是否文件类型：&quot;</span> + file.isFile());</span><br><span class="line">System.out.println(<span class="string">&quot;是否为文件夹：&quot;</span> + file.isDirectory());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查看运行结果"><a href="#查看运行结果" class="headerlink" title="查看运行结果"></a>查看运行结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">文件名称:FileInfo.java</span><br><span class="line">文件是否存在：<span class="literal">true</span></span><br><span class="line">文件的相对路径：src\com\zch\io\FileInfo.java</span><br><span class="line">文件的绝对路径：D:\Java\IO\src\com\rlone\io\FileInfo.java</span><br><span class="line">是否为可执行文件：<span class="literal">true</span></span><br><span class="line">文件可以读取：<span class="literal">true</span></span><br><span class="line">文件可以写入：<span class="literal">true</span></span><br><span class="line">文件上级路径：src\com\zch\io</span><br><span class="line">文件大小：115B</span><br><span class="line">文件最后修改时间：Sat Sep 09 <span class="number">21</span>:<span class="number">30</span>:<span class="number">10</span> CST <span class="number">2017</span></span><br><span class="line">是否文件类型：<span class="literal">true</span></span><br><span class="line">是否为文件夹：<span class="literal">false</span></span><br></pre></td></tr></table></figure><h1 id="2-字节输入流抽象类InputStream"><a href="#2-字节输入流抽象类InputStream" class="headerlink" title="2.字节输入流抽象类InputStream"></a>2.字节输入流抽象类InputStream</h1><p style='font-size:20px;font-family:"幼圆"'>字节流用于处理二进制数据的读取和写入，它以字节为单位</p><h2 id="InputStream-类是字节输入流的抽象类，定义了操作输入流的各种方法，这些方法如表："><a href="#InputStream-类是字节输入流的抽象类，定义了操作输入流的各种方法，这些方法如表：" class="headerlink" title="InputStream 类是字节输入流的抽象类，定义了操作输入流的各种方法，这些方法如表："></a>InputStream 类是字节输入流的抽象类，定义了操作输入流的各种方法，这些方法如表：</h2><table><thead><tr><th align="center">方法</th><th align="center">说明</th><th align="center">返回值</th></tr></thead><tbody><tr><td align="center">available()</td><td align="center">返回当前输入流的数据读取方法可以读取的有效字节数量</td><td align="center">int</td></tr><tr><td align="center">read()</td><td align="center">从当前数据流中读取一个字节。若已达到流结尾，则返回-1</td><td align="center">int</td></tr><tr><td align="center">read(byte[ ] bytes)</td><td align="center">从当前输入流读取一定的byte数据，并存取在数组中，然后返回读取的byte数据的数量，若已到达流结尾，则返回-1。</td><td align="center">int</td></tr><tr><td align="center">reset()</td><td align="center">将当前的输入流重新定位到最后一次调用mark()方法时的位置</td><td align="center">void</td></tr><tr><td align="center">mark(int readlimit)</td><td align="center">在当前输入流中做标记位置，当调用reset()方法时将返回到该位置，从标记位置开始，到再读入readlimit个字符为止，这个标记都维持有效。</td><td align="center">void</td></tr><tr><td align="center">markSupported()</td><td align="center">测试当前输入流是否支持mark()和reset()方法，只要其中一个不支持，则返回false</td><td align="center">boolean</td></tr><tr><td align="center">skip(long n)</td><td align="center">跳过和丢弃当前输入的n个字节数据</td><td align="center">long</td></tr><tr><td align="center">close()</td><td align="center">关闭当前输入流，并释放任何与之相关联的系统资源</td><td align="center">void</td></tr></tbody></table><p>InputStream 类是抽象类，不能通过new关键字来创建该实例对象，需要其子类创建该实例对象。下面通过实例如何使用InputStream从控制台获取用户输入的数据信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rlone.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建InputStream实例inp，并将其赋值为System类的in属性，定义为控制台输入流，从inp输入流中获取字节信息，</span></span><br><span class="line"><span class="comment"> * 用这些字节信息创建字符串，并将其在控制台上输出。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rlone</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputMessage</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> System.in;</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(is.read() != -<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//根据输入的信息创建字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes).trim();</span><br><span class="line">&#125;</span><br><span class="line">is.close();<span class="comment">//关闭输入流</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-字节输出流抽象类OutputStream类"><a href="#3-字节输出流抽象类OutputStream类" class="headerlink" title="3.字节输出流抽象类OutputStream类"></a>3.字节输出流抽象类OutputStream类</h1><h2 id="OutputStream定义了输出流的各种方法，如下表："><a href="#OutputStream定义了输出流的各种方法，如下表：" class="headerlink" title="OutputStream定义了输出流的各种方法，如下表："></a>OutputStream定义了输出流的各种方法，如下表：</h2><table><thead><tr><th align="center">方法</th><th align="center">说明</th><th align="center">返回值</th></tr></thead><tbody><tr><td align="center">write(byte[ ] b)</td><td align="center">将byte[ ] 数组中的数据写入当前输出流</td><td align="center">void</td></tr><tr><td align="center">write(byte[] b ,int off, int len)</td><td align="center">将byte[ ]数组下标off开始的len长度的数据写入当前输出流void</td><td align="center">void</td></tr><tr><td align="center">write（int i)</td><td align="center">写入一个byte数据到当前输出流</td><td align="center">void</td></tr><tr><td align="center">flush()</td><td align="center">刷新当前输出流，并强制写入所有缓冲的字节数据</td><td align="center">void</td></tr><tr><td align="center">close()</td><td align="center">关闭当前输出流</td><td align="center">void</td></tr></tbody></table><p> OutputStream 类是抽象类，不能通过new关键字来创建该实例对象，需要其子类创建该实例对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rlone.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建OutputStream实例out,并将其赋值为System.out标准输出流。通过write()方法向流写入数据。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rlone</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputData</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">output</span> <span class="operator">=</span> System.out;<span class="comment">//实例化OutputStream对象</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] bytes = <span class="string">&quot;使用OutputStream输出流在控制台输出字符串\n&quot;</span>.getBytes();<span class="comment">//创建bytes数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">output.write(bytes);</span><br><span class="line"></span><br><span class="line">bytes = <span class="string">&quot;输出内容：\n&quot;</span>.getBytes();</span><br><span class="line">output.write(bytes);        <span class="comment">//向流中写入数据</span></span><br><span class="line"></span><br><span class="line">bytes = <span class="string">&quot;Java数据交互管道 ---- IO流 \n&quot;</span>.getBytes();</span><br><span class="line">output.write(bytes);</span><br><span class="line"></span><br><span class="line">output.close();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用OutputStream输出流在控制台输出字符串</span><br><span class="line">输出内容：</span><br><span class="line">   Java数据交互管道——IO流 </span><br></pre></td></tr></table></figure><h1 id="4、文件字节输入流类-：-FileInputStream类"><a href="#4、文件字节输入流类-：-FileInputStream类" class="headerlink" title="4、文件字节输入流类 ： FileInputStream类"></a>4、文件字节输入流类 ： FileInputStream类</h1><p>文件字节输入流可以从指定路径的文件中读取字节数据。文件字节输入流类继承InputStream类，并实现了读取输入流的各种方法,</p><h2 id="创建文件字节输入流创建的构造方法语法如下："><a href="#创建文件字节输入流创建的构造方法语法如下：" class="headerlink" title="创建文件字节输入流创建的构造方法语法如下："></a>创建文件字节输入流创建的构造方法语法如下：</h2><ul><li><p>以File对象为参数创建FileInputStream实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">FileInputStream</span>（File file）</span><br></pre></td></tr></table></figure></li><li><p>以文件对象的绝对路径为参数创建FIleInputStream实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">FileInputStream</span>（String filepath）</span><br></pre></td></tr></table></figure></li></ul><h1 id="5、文件字节输出流类：FileOutputStream"><a href="#5、文件字节输出流类：FileOutputStream" class="headerlink" title="5、文件字节输出流类：FileOutputStream"></a>5、文件字节输出流类：FileOutputStream</h1><p>文件字节输出流关联指定文件路径的文件，数据通过文件字节输出流以字节为单位输出并保存到文件中。文件字节输出流继承自OutputStream类，并实现OutputStream类的各种方法。</p><h2 id="文件字节输出流的构造方法语法如下："><a href="#文件字节输出流的构造方法语法如下：" class="headerlink" title="文件字节输出流的构造方法语法如下："></a><strong>文件字节输出流的构造方法语法如下：</strong></h2><ul><li><p>以File对象为参数创建FileOutputStream实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">FileOutputStream</span>（File file）</span><br></pre></td></tr></table></figure></li><li><p>以文件对象的绝对路径为参数创建FIleOutputStream实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">FileOutputStream</span>（String filepath）</span><br></pre></td></tr></table></figure></li></ul><p>下面通过实例介绍文件的写入和读取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rlone.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建OutputStream实例out,并将其赋值为System.out标准输出流，通过write方法向流中写入数据</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rlone</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileCreate</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/&quot;</span>, <span class="string">&quot;word.txt&quot;</span>);  <span class="comment">//创建文件对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//如果文件不存在则新建文件</span></span><br><span class="line"><span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">file.createNewFile();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] bytes = <span class="string">&quot;Java数据交流管道——IO流&quot;</span>.getBytes();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将数组的信息写入文件中</span></span><br><span class="line">output.write(bytes);</span><br><span class="line"></span><br><span class="line">output.close();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            </span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] bytes2 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> input.read(bytes2);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;文件中的信息是：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(bytes2, <span class="number">0</span>, len));</span><br><span class="line"></span><br><span class="line">input.close();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-字符输入流抽象类：Reader类"><a href="#6-字符输入流抽象类：Reader类" class="headerlink" title="6.字符输入流抽象类：Reader类"></a>6.字符输入流抽象类：Reader类</h1><h2 id="该类定义了操作字符输入流的方法，如下表："><a href="#该类定义了操作字符输入流的方法，如下表：" class="headerlink" title="该类定义了操作字符输入流的方法，如下表："></a>该类定义了操作字符输入流的方法，如下表：</h2><table><thead><tr><th align="center">方法</th><th align="center">说明</th><th align="center">返回值</th></tr></thead><tbody><tr><td align="center">ready()</td><td align="center">判断此数据流是否准备好</td><td align="center">boolean</td></tr><tr><td align="center">read()</td><td align="center">读入一个字符，若已读到流结尾，则返回值为-1</td><td align="center">int</td></tr><tr><td align="center">read(char[ ])</td><td align="center">读取一些字符到char[ ]数组内，并返回所读入的字符的数量，若已到达流结尾，则返回-1</td><td align="center">int</td></tr><tr><td align="center">read(char[ ] chars,int off,int len)</td><td align="center">读取一些字符到char[ ]数组下标从off开始到off+len的位置，并返回所读入的字符的数量，若已到达流结尾，则返回-1；</td><td align="center">int</td></tr><tr><td align="center">reset()</td><td align="center">将当前输入流重新定位到最后一次mark（）方法时的位置</td><td align="center">void</td></tr><tr><td align="center">mark(int readLimit)</td><td align="center">将当前输入流中做标记，当调用reset方法时将返回到该位置，从标记位置开始，到再读入readLimit个字符为止，这个标记都维持有效</td><td align="center">void</td></tr><tr><td align="center">markSupported</td><td align="center">测试当前输入流是否支持mark()方法和reset()方法。只要有一个方法不支持，则返回-1</td><td align="center">boolean</td></tr><tr><td align="center">skip(long n)</td><td align="center">跳过参数n指定的字符数量，并返回所跳过字符的数量</td><td align="center">long</td></tr><tr><td align="center">close()</td><td align="center">关闭字符输入流，并释放与之关联的所有资源</td><td align="center">void</td></tr></tbody></table><h1 id="7-字符输出流类Writer类"><a href="#7-字符输出流类Writer类" class="headerlink" title="7.字符输出流类Writer类"></a>7.字符输出流类Writer类</h1><p> Writer 类主要是用于解决字符输入流的类，其地位与Reader类在输入流的地位和作用是相同的，也是所有字符输出流的流类。</p><h2 id="Writer类的主要方法如下："><a href="#Writer类的主要方法如下：" class="headerlink" title="Writer类的主要方法如下："></a>Writer类的主要方法如下：</h2><table><thead><tr><th>方法</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>write(char[ ] cbuf)</td><td>将字符数组的数据写入字符输出流</td><td>void</td></tr><tr><td>write(char[ ] cbuf int off ,int len)</td><td>将字符数组从下标off 开始向输入流写入长度为len的数据</td><td>void</td></tr><tr><td>write(int c )</td><td>向字符输入流中写入一个字符数据</td><td>void</td></tr><tr><td>write(String str )</td><td>向输入流中写入一个字符串数据</td><td>void</td></tr><tr><td>write(String str , int off ,int len)</td><td>向输入流中写入一个字符串从off 开始长度为len的数据</td><td>void</td></tr><tr><td>flush()</td><td>刷新当前输出流，并强制写入所有缓冲区的字节数据</td><td>void</td></tr><tr><td>close()</td><td>向输出流中写入缓冲区的数据，然后关闭当前输出流，释放所有与当前输出流相关联的系统资源</td><td>void</td></tr></tbody></table><h1 id="8-文件字符输入流FileReader"><a href="#8-文件字符输入流FileReader" class="headerlink" title="8.文件字符输入流FileReader"></a>8.文件字符输入流FileReader</h1><p>文件字符输入流与文件字节输入流的功能相似，但是传送数据的方式不一样，字节流以字节为单位传送数据，可以使文本、视频、音频、图片等。字符流以字符为单位传送数据，只能传送文本类型的数据</p><h2 id="创建字符输入流常用的构造方法："><a href="#创建字符输入流常用的构造方法：" class="headerlink" title="创建字符输入流常用的构造方法："></a>创建字符输入流常用的构造方法：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">FileReader</span>（File file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">FileReader</span>（File file;</span><br></pre></td></tr></table></figure><h2 id="通过实例介绍FileReader类读取指定磁盘文件的内容。"><a href="#通过实例介绍FileReader类读取指定磁盘文件的内容。" class="headerlink" title="通过实例介绍FileReader类读取指定磁盘文件的内容。"></a>通过实例介绍FileReader类读取指定磁盘文件的内容。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rlone.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileInAndOut</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//定义指定磁盘的文件的File对象</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D://word.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(! file.exists())&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;对不起，不包含指定路径的文件&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//根据指定路径的File对象创建FileReader对象</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//定义char数组</span></span><br><span class="line"><span class="type">char</span>[] data = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">23</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//循环读取文件中的数据</span></span><br><span class="line"><span class="keyword">while</span>((length = fr.read(data))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">//根据读取文件的内容创建String 对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data,<span class="number">0</span>,length);</span><br><span class="line">                    <span class="comment">//输出读取内容</span></span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">                <span class="comment">//关闭流</span></span><br><span class="line">fr.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-件字符输出流FileWriter"><a href="#9-件字符输出流FileWriter" class="headerlink" title="9.件字符输出流FileWriter"></a>9.件字符输出流FileWriter</h1><p>文件字符输出流继承自Writer类，提供了向文件输出的各种方法，数据通过文件字符输出流以字符为单位输出并保存到文件中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rlone.io;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过给定的String类型参数的指定文件名称与路径，创建FileWriter类。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zch</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileWriterDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建指定文件</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D://word2.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(! file.exists())&#123;</span><br><span class="line">            <span class="comment">//如果指定文件不存在，新建文件</span></span><br><span class="line">file.createNewFile();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D://word.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建FileWriter对象</span></span><br><span class="line"><span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="comment">//如果没有读到文件末尾</span></span><br><span class="line"><span class="keyword">while</span>((length = fr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//向文件写入数据</span></span><br><span class="line">fw.write(length);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">fr.close();</span><br><span class="line">fw.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 style="text-align: center">----------END----------</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、使用文件类-：-File类&quot;&gt;&lt;a href=&quot;#1、使用文件类-：-File类&quot; class=&quot;headerlink&quot; title=&quot;1、使用文件类 ： File类&quot;&gt;&lt;/a&gt;1、使用文件类 ： File类&lt;/h1&gt;&lt;h2 id=&quot;如何获取文件信息&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="后端" scheme="http://example.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="i/o流" scheme="http://example.com/tags/i-o%E6%B5%81/"/>
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
</feed>
